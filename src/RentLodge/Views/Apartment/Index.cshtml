@model IEnumerable<RentLodge.Models.Apartment>
@{
    ViewData["Title"] = "List of all apartments";
}
<div class="search-result">
    <div class="row">
        <div class="col l11 offset-l1" id="" style="overflow-y: scroll; height:70vh;">
            <form asp-controller="Apartment" asp-action="Index" class="form-horizontal">
                <h4>Available apartments</h4>
                <hr />
                <div class="row">
                    @if(Model.Count() == 0)
                    {
                        <h5>There is no available apartments at that time</h5>
                    }
                    @foreach (var item in Model)
                    {
                    <div class="col s12 l4">
                        <div class="card">
                            <div class="card-image">
                                @if (@item.Photos.Count == 0)
                                {
                                    <img src="~/images/placeholder.jpg" />
                                }
                                else
                                {
                                    string photoImage = "";
                                    if (@item.Photos.First().Image != null)
                                    {
                                        var base64File = Convert.ToBase64String(@item.Photos.First().Image);
                                        photoImage = String.Format("data:image/gif;base64,{0}", base64File);
                                    }
                                    <img src="@photoImage" width="200" />
                                }
                                <span class="card-title">@Html.DisplayFor(modelItem => item.Title)</span>
                            </div>

                            <div class="card-action">
                                <a>Rating: @item.Rating</a>
                                <a>$ @item.Price per night</a> <br />
                                @Html.ActionLink("Show more", "Details", new { id = item.Id })

                            </div>
                        </div>
                    </div>
                    }
                </div>
            </form>
        </div>
    </div>
</div>
    
<div id="map" class="col l12" style="height:500px;">
</div>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8T9J_Db4_FYC_ogOhXHmEFLb423pktZk&callback=initMap">
</script>
<script type="text/javascript">
    function initMap() {
        console.log("@ViewBag.Markers");

        var locations = JSON.parse("@ViewBag.Markers");
        console.log(locations);

        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: new google.maps.LatLng(-33.92, 151.25),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var bounds = new google.maps.LatLngBounds();
        var infowindow = new google.maps.InfoWindow();

        for (i = 0; i < locations.length; i++) {
            console.log(locations.length)
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][0], locations[i][1]),
                map: map
            });

            bounds.extend(marker.position);
            console.log(locations.length)

            google.maps.event.addListener(marker, 'click', (function (marker, i) {
                return function () {
                    console.log(locations.length)

                    infowindow.setContent(locations[i][0]);
                    infowindow.setContent(locations[i][0]);

                    infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(marker, 'mouseover', (function (marker, i) {
                return function () {
                    infowindow.setContent(String(locations[i][2]));
                    infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(marker, 'mouseout', function () {
                infowindow.close();
            });

            map.fitBounds(bounds);
            var listener = google.maps.event.addListener(map, "idle", function () {
                //map.setZoom(15);
                google.maps.event.removeListener(listener);
            });
        }
    }
</script>
