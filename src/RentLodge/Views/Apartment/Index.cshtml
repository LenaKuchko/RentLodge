@model IEnumerable<RentLodge.Models.Apartment>
@{
    ViewData["Title"] = "List of all apartments";
}

    <div class="row">
        <div class="col l11 offset-l1" id="" style="overflow-y: scroll; height:70vh;">
            <form asp-controller="Apartment" asp-action="Index" class="form-horizontal">
                <h4>All apartments</h4>
                <hr />
                @foreach (var item in Model)
                  {
                    @Html.ActionLink("Details", "Details", new { id = item.Id })
                    @*@Html.ActionLink("Edit", "Edit", new { id = item.Id })
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id });*@

                    <h2>@Html.DisplayFor(modelItem => item.Title)</h2>
                  }

            </form>
        </div>
       
    </div>
    <div id="map" class="col l12" style="height:500px;">
    </div>



<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8T9J_Db4_FYC_ogOhXHmEFLb423pktZk&callback=initMap">
</script>
<script type="text/javascript">
    function initMap() {
        console.log("@ViewBag.Markers");

        var locations = JSON.parse("@ViewBag.Markers");
        console.log(locations);

        

        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: new google.maps.LatLng(-33.92, 151.25),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var bounds = new google.maps.LatLngBounds();
        var infowindow = new google.maps.InfoWindow();

        for (i = 0; i < locations.length; i++) {
            console.log(locations.length)
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][0], locations[i][1]),
                map: map
            });


            bounds.extend(marker.position);
            console.log(locations.length)

            google.maps.event.addListener(marker, 'click', (function (marker, i) {
                return function () {
                    console.log(locations.length)

                    infowindow.setContent(locations[i][0]);
                    infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(marker, 'mouseover', (function (marker, i) {
                return function () {
                    infowindow.setContent(String(locations[i][2]));
                    infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(marker, 'mouseout', function () {
                infowindow.close();
            });


            map.fitBounds(bounds);
            var listener = google.maps.event.addListener(map, "idle", function () {
                //map.setZoom(6);
                google.maps.event.removeListener(listener);
            });
        }
    }
</script>
